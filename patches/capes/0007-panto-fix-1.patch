From 938109de930dd00ed3ae79242636b2bd4ac19198 Mon Sep 17 00:00:00 2001
From: Koen Kooi <koen@dominion.thruhere.net>
Date: Fri, 28 Sep 2012 19:32:35 +0200
Subject: [PATCH 7/8] panto fix #1

---
 drivers/capebus/bone-dvi-cape.c  |   41 +------------------------------------
 drivers/capebus/capebus-driver.c |   11 ++++++++++
 drivers/usb/musb/musb_host.c     |    2 +
 3 files changed, 15 insertions(+), 39 deletions(-)

diff --git a/drivers/capebus/bone-dvi-cape.c b/drivers/capebus/bone-dvi-cape.c
index c4ba4cf..b2e242d 100644
--- a/drivers/capebus/bone-dvi-cape.c
+++ b/drivers/capebus/bone-dvi-cape.c
@@ -63,8 +63,7 @@ static const struct of_device_id of_da8xx_dt_match[] = {
 static int __devinit da8xx_dt_probe(struct platform_device *pdev)
 {
 	struct da8xx_priv *priv;
-	struct clk *disp_pll, *lcdc_clk;
-	struct clk_lookup *l;
+	struct clk *disp_pll;
 	struct pinctrl *pinctrl;
 	int ret = -EINVAL;
 
@@ -163,42 +162,6 @@ static int __devinit da8xx_dt_probe(struct platform_device *pdev)
 		return -ENODEV;
 	}
 
-#if 0
-	priv->lcdc_pdev->dev.parent = &pdev->dev;
-	priv->lcdc_pdev->dev.platform_data = &priv->dvi_pdata;
-	
-	priv->lcdc_res[0].start = 0x4830E000;
-	priv->lcdc_res[0].end = 0x4830E000 + SZ_8K - 1;
-	priv->lcdc_res[0].flags = IORESOURCE_MEM;
-
-	lcdc_clk = omap_clk_get_by_name("lcd_gclk");
-	if (IS_ERR(lcdc_clk)) {
-		dev_err(&pdev->dev, "Failed to get lcdc_fck");
-		return PTR_ERR(lcdc_clk);
-	}
-
-#if 0
-	l = clkdev_alloc(lcdc_clk, "fck", dev_name(&priv->lcdc_pdev->dev));
-	if (!l) {
-		dev_err(&pdev->dev, "Failed to clkdev_alloc");
-		return -ENODEV;
-	}
-
-	clkdev_add(l);
-#endif
-
-	priv->lcdc_pdev->resource = priv->lcdc_res;
-	priv->lcdc_pdev->num_resources = ARRAY_SIZE(priv->lcdc_res);
-
-	dev_info(&pdev->dev, "Adding lcdc\n");
-
-	ret = platform_device_add(priv->lcdc_pdev);
-	if (ret != 0) {
-		dev_err(&pdev->dev, "Failed to add LCDC platform device\n");
-		return -ENODEV;
-	}
-#endif
-
 	dev_info(&pdev->dev, "ALL OK\n");
 
 	platform_set_drvdata(pdev, priv);
@@ -296,7 +259,7 @@ static int bonedvi_probe(struct cape_dev *dev, const struct cape_device_id *id)
 			"version", version);
 	if (IS_ERR(info->da8xx_pdev)) {
 		info->da8xx_pdev = NULL;
-		dev_err(&dev->dev, "Failed to create platform led platform device\n");
+		dev_err(&dev->dev, "Failed to create da8xx platform device\n");
 		err = -ENODEV;
 		goto err_no_da8xx_fb;
 	}
diff --git a/drivers/capebus/capebus-driver.c b/drivers/capebus/capebus-driver.c
index 84c93e0..17e2327 100644
--- a/drivers/capebus/capebus-driver.c
+++ b/drivers/capebus/capebus-driver.c
@@ -359,6 +359,9 @@ capebus_of_compatible_device_property_match(struct cape_dev *dev,
 	const char* cp;
 	int cplen, l;
 
+	dev_info(&dev->dev, "matches[0] %s, prop %s, value %s\n",
+			matches[0].compatible, prop, prop_value);
+
 	if (prop == NULL || prop_value == NULL)
 		goto try_non_property;
 
@@ -367,6 +370,8 @@ capebus_of_compatible_device_property_match(struct cape_dev *dev,
 		(node = of_get_next_child(dev->dev.of_node, node2)) != NULL;
 		node2 = node) { 
 
+		dev_info(&dev->dev, "node: name %s\n", node->name);
+
 		cp = of_get_property(node, prop, &cplen);
 		if (cp == NULL)
 			continue;
@@ -388,6 +393,8 @@ capebus_of_compatible_device_property_match(struct cape_dev *dev,
 			(node3 = of_get_next_child(node, node4)) != NULL;
 			node4 = node3) { 
 
+			dev_info(&dev->dev, "node3: name %s\n", node3->name);
+
 			match = of_match_node(matches, node3);
 			if (match) {
 				/* release reference to parent, keep this one */
@@ -402,11 +409,15 @@ try_non_property:
 		(node = of_get_next_child(dev->dev.of_node, node2)) != NULL;
 		node2 = node) { 
 
+		dev_info(&dev->dev, "node: name %s\n", node->name);
+
 		match = of_match_node(matches, node);
 		if (match)
 			return node;
 	}
 
+	dev_info(&dev->dev, "No match\n");
+
 	return NULL;
 }
 EXPORT_SYMBOL(capebus_of_compatible_device_property_match);
diff --git a/drivers/usb/musb/musb_host.c b/drivers/usb/musb/musb_host.c
index 1ae378d..ddced6b 100644
--- a/drivers/usb/musb/musb_host.c
+++ b/drivers/usb/musb/musb_host.c
@@ -2304,8 +2304,10 @@ static int musb_bus_suspend(struct usb_hcd *hcd)
 	}
 
 	if (musb->is_active) {
+#if 0
 		WARNING("trying to suspend as %s while active\n",
 				otg_state_string(musb->xceiv->state));
+#endif
 		return -EBUSY;
 	} else
 		return 0;
-- 
1.7.7.6

