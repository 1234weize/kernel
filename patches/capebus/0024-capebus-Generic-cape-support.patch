From cc36104a0c4edd7cc592e414450ad64f40a189ab Mon Sep 17 00:00:00 2001
From: Pantelis Antoniou <panto@antoniou-consulting.com>
Date: Fri, 19 Oct 2012 10:41:54 +0300
Subject: [PATCH 24/33] capebus: Generic cape support

---
 drivers/capebus/boards/capebus-bone-pdevs.c |  115 +++++++++++++++++++++++++++
 drivers/capebus/capes/Kconfig               |    7 ++
 drivers/capebus/capes/Makefile              |    1 +
 include/linux/capebus/capebus-bone.h        |   17 ++++
 4 files changed, 140 insertions(+), 0 deletions(-)

diff --git a/drivers/capebus/boards/capebus-bone-pdevs.c b/drivers/capebus/boards/capebus-bone-pdevs.c
index fd91208..d274353 100644
--- a/drivers/capebus/boards/capebus-bone-pdevs.c
+++ b/drivers/capebus/boards/capebus-bone-pdevs.c
@@ -384,3 +384,118 @@ void bone_capebus_unregister_pdev_adapters(struct bone_capebus_bus *bus)
 		drvp->registered = 0;
 	}
 }
+
+struct bone_capebus_generic_info *
+bone_capebus_probe_generic(struct cape_dev *dev,
+		const struct cape_device_id *id)
+{
+	static const struct of_device_id gpio_leds_of_match[] = {
+		{ .compatible = "gpio-leds", }, { },
+	};
+	static const struct of_device_id tps_bl_of_match[] = {
+		{ .compatible = "tps65217-backlight", }, { },
+	};
+	static const struct of_device_id gpio_keys_of_match[] = {
+		{ .compatible = "gpio-keys", }, { },
+	};
+	static const struct of_device_id ti_tscadc_dt_of_match[] = {
+		{ .compatible = "ti-tscadc-dt", }, { },
+	};
+	static const struct of_device_id da8xx_dt_of_match[] = {
+		{ .compatible = "da8xx-dt", }, { },
+	};
+	struct bone_capebus_generic_info *info;
+	char boardbuf[33];
+	char versionbuf[5];
+	const char *board_name;
+	const char *version;
+	const struct of_device_id *match;
+	struct pinctrl *pinctrl;
+
+	/* get the board name (also matches the cntrlboard before checking) */
+	board_name = bone_capebus_id_get_field(id, BONE_CAPEBUS_BOARD_NAME,
+			boardbuf, sizeof(boardbuf));
+	if (board_name == NULL)
+		return ERR_PTR(ENODEV);
+
+	/* match compatible? */
+	match = capebus_of_match_device(dev, "board-name", board_name);
+	if (match == NULL)
+		return ERR_PTR(ENODEV);
+
+	/* get the board version */
+	version = bone_capebus_id_get_field(id, BONE_CAPEBUS_VERSION,
+			versionbuf, sizeof(versionbuf));
+	if (version == NULL)
+		return ERR_PTR(-ENODEV);
+
+	pinctrl = devm_pinctrl_get_select_default(&dev->dev);
+	if (IS_ERR(pinctrl))
+		dev_warn(&dev->dev,
+			"pins are not configured from the driver\n");
+
+	dev_info(&dev->dev, "%s: V=%s '%s'\n", board_name,
+			version, match->compatible);
+
+	info = devm_kzalloc(&dev->dev, sizeof(*info), GFP_KERNEL);
+	if (info == NULL) {
+		dev_err(&dev->dev, "Failed to allocate info\n");
+		return ERR_PTR(-ENOMEM);
+	}
+	info->dev = dev;
+
+	/* NOTE: platform devices fail to be created silently */
+	info->leds_pdev = capebus_of_platform_compatible_device_create(dev,
+			gpio_leds_of_match, "generic-cape-leds",
+			"version", version);
+	if (IS_ERR(info->leds_pdev))
+		info->leds_pdev = NULL;
+	if (info->leds_pdev != NULL)
+		dev_info(&dev->dev, "LED pdev created OK\n");
+
+	info->tps_bl_pdev = capebus_of_platform_compatible_device_create(
+			dev, tps_bl_of_match, "generic-cape-bl",
+			"version", version);
+	if (IS_ERR(info->tps_bl_pdev))
+		info->tps_bl_pdev = NULL;
+	if (info->tps_bl_pdev != NULL)
+		dev_info(&dev->dev, "tps backlight pdev created OK\n");
+
+	info->keys_pdev = capebus_of_platform_compatible_device_create(dev,
+			gpio_keys_of_match, "generic-cape-keys",
+			"version", version);
+	if (IS_ERR(info->keys_pdev))
+		info->keys_pdev = NULL;
+	if (info->keys_pdev != NULL)
+		dev_info(&dev->dev, "GPIO keys pdev created OK\n");
+
+	info->tscadc_dt_pdev = capebus_of_platform_compatible_device_create(dev,
+			ti_tscadc_dt_of_match, "generic-cape-ti-tscadc",
+			"version", version);
+	if (IS_ERR(info->tscadc_dt_pdev))
+		info->tscadc_dt_pdev = NULL;
+	if (info->tscadc_dt_pdev != NULL)
+		dev_info(&dev->dev, "TI tscadc pdev created OK\n");
+
+	info->da8xx_dt_pdev = capebus_of_platform_compatible_device_create(dev,
+			da8xx_dt_of_match, "generic-cape-da8xx",
+			"version", version);
+	if (IS_ERR(info->da8xx_dt_pdev))
+		info->da8xx_dt_pdev = NULL;
+	if (info->da8xx_dt_pdev != NULL)
+		dev_info(&dev->dev, "da8xx-dt pdev created OK\n");
+
+	return info;
+}
+EXPORT_SYMBOL(bone_capebus_probe_generic);
+
+void bone_capebus_remove_generic(struct bone_capebus_generic_info *info)
+{
+	platform_device_unregister(info->da8xx_dt_pdev);
+	platform_device_unregister(info->tscadc_dt_pdev);
+	platform_device_unregister(info->keys_pdev);
+	platform_device_unregister(info->tps_bl_pdev);
+	platform_device_unregister(info->leds_pdev);
+	devm_kfree(&info->dev->dev, info);
+}
+EXPORT_SYMBOL(bone_capebus_remove_generic);
diff --git a/drivers/capebus/capes/Kconfig b/drivers/capebus/capes/Kconfig
index 2d2a2dc..fb2f466 100644
--- a/drivers/capebus/capes/Kconfig
+++ b/drivers/capebus/capes/Kconfig
@@ -18,3 +18,10 @@ config CAPEBUS_BONE_LCD
 	default n
 	help
 	  "Select this to enable a driver for the LCD3,LCD4,LCD7 capes"
+
+config CAPEBUS_BONE_GENERIC
+	tristate "Beaglebone Generic cape driver"
+	depends on CAPEBUS_BONE_CONTROLLER
+	default n
+	help
+	  "Select this to enable a generic cape driver; hone your DT skillz!"
diff --git a/drivers/capebus/capes/Makefile b/drivers/capebus/capes/Makefile
index 3a329cf..5d626d4 100644
--- a/drivers/capebus/capes/Makefile
+++ b/drivers/capebus/capes/Makefile
@@ -1,3 +1,4 @@
 obj-$(CONFIG_CAPEBUS_BONE_DVI)		+= bone-dvi-cape.o
 obj-$(CONFIG_CAPEBUS_BONE_GEIGER)	+= bone-geiger-cape.o
 obj-$(CONFIG_CAPEBUS_BONE_LCD)		+= bone-lcd-cape.o
+obj-$(CONFIG_CAPEBUS_BONE_GENERIC)	+= bone-generic-cape.o
diff --git a/include/linux/capebus/capebus-bone.h b/include/linux/capebus/capebus-bone.h
index 31cef7b..0791905 100644
--- a/include/linux/capebus/capebus-bone.h
+++ b/include/linux/capebus/capebus-bone.h
@@ -87,4 +87,21 @@ int bone_capebus_match_board(const struct cape_device_id *id,
 int bone_capebus_register_pdev_adapters(struct bone_capebus_bus *bus);
 void bone_capebus_unregister_pdev_adapters(struct bone_capebus_bus *bus);
 
+/* generic cape support */
+struct bone_capebus_generic_info {
+	struct cape_dev *dev;
+	struct platform_device *leds_pdev;
+	struct platform_device *da8xx_dt_pdev;
+	struct platform_device *tps_bl_pdev;
+	struct platform_device *keys_pdev;
+	struct platform_device *tscadc_dt_pdev;
+};
+
+struct bone_capebus_generic_info *
+bone_capebus_probe_generic(struct cape_dev *dev,
+		const struct cape_device_id *id);
+
+void bone_capebus_remove_generic(
+		struct bone_capebus_generic_info *info);
+
 #endif
-- 
1.7.7.6

