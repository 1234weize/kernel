From 356a1d76b5199558fbf6150f9683c950ac6b551f Mon Sep 17 00:00:00 2001
From: Pantelis Antoniou <panto@antoniou-consulting.com>
Date: Fri, 19 Oct 2012 10:40:24 +0300
Subject: [PATCH 23/33] capebus: Update geiger cape to use new accessors

---
 drivers/capebus/capes/bone-geiger-cape.c |   35 ++++++++++++++++++-----------
 1 files changed, 22 insertions(+), 13 deletions(-)

diff --git a/drivers/capebus/capes/bone-geiger-cape.c b/drivers/capebus/capes/bone-geiger-cape.c
index 28337c3..b3fb979 100644
--- a/drivers/capebus/capes/bone-geiger-cape.c
+++ b/drivers/capebus/capes/bone-geiger-cape.c
@@ -260,6 +260,7 @@ static int bonegeiger_probe(struct cape_dev *dev, const struct cape_device_id *i
 	const struct of_device_id *match;
 	struct bone_geiger_info *info;
 	struct pinctrl *pinctrl;
+	struct device_node *node;
 	u32 val;
 	int err;
 
@@ -302,8 +303,9 @@ static int bonegeiger_probe(struct cape_dev *dev, const struct cape_device_id *i
 
 	dev_info(&dev->dev, "Getting PWM device\n");
 
-	/* NOTE: No versioning! */
-	info->pwm_dev = pwm_get(&dev->dev, NULL);
+	node = capebus_of_find_property_node(dev, "version", version, "pwms");
+	info->pwm_dev = of_pwm_request(node, NULL);
+	of_node_put(node);
 	if (IS_ERR(info->pwm_dev)) {
 		dev_err(&dev->dev, "unable to request PWM\n");
 		err = PTR_ERR(info->pwm_dev);
@@ -312,8 +314,9 @@ static int bonegeiger_probe(struct cape_dev *dev, const struct cape_device_id *i
 
 	dev_info(&dev->dev, "Got PWM OK\n");
 
-	if (of_property_read_u32(dev->dev.of_node, "pwm-frequency",
-				&val) != 0) {
+	if (capebus_of_property_read_u32(dev,
+				"version", version,
+				"pwm-frequency", &val) != 0) {
 		val = 20000;
 		dev_warn(&dev->dev, "Could not read pwm-frequency property; "
 				"using default %u\n",
@@ -321,8 +324,9 @@ static int bonegeiger_probe(struct cape_dev *dev, const struct cape_device_id *i
 	}
 	info->pwm_frequency = val;
 
-	if (of_property_read_u32(dev->dev.of_node, "pwm-duty-cycle",
-				&val) != 0) {
+	if (capebus_of_property_read_u32(dev,
+				"version", version,
+				"pwm-duty-cycle", &val) != 0) {
 		val = 60;
 		dev_warn(&dev->dev, "Could not read pwm-duty-cycle property; "
 				"using default %u\n",
@@ -334,7 +338,9 @@ static int bonegeiger_probe(struct cape_dev *dev, const struct cape_device_id *i
 			"duty cycle = %d%%\n",
 			info->pwm_frequency, info->pwm_duty_cycle);
 
-	info->event_gpio = of_get_gpio_flags(dev->dev.of_node, 0, NULL);
+	node = capebus_of_find_property_node(dev, "gpios", version, "pwms");
+	info->event_gpio = of_get_gpio_flags(node, 0, NULL);
+	of_node_put(node);
 	if (IS_ERR_VALUE(info->event_gpio)) {
 		dev_err(&dev->dev, "unable to get event GPIO\n");
 		err = info->event_gpio;
@@ -401,8 +407,9 @@ static int bonegeiger_probe(struct cape_dev *dev, const struct cape_device_id *i
 	led_trigger_event(info->run_led, LED_OFF);
 
 	/* default */
-	if (of_property_read_u32(dev->dev.of_node, "event-blink-delay",
-				&val) != 0) {
+	if (capebus_of_property_read_u32(dev,
+				"version", version,
+				"event-blink-delay", &val) != 0) {
 		val = 30;
 		dev_warn(&dev->dev, "Could not read event-blink-delay "
 				"property; using default %u\n",
@@ -420,16 +427,18 @@ static int bonegeiger_probe(struct cape_dev *dev, const struct cape_device_id *i
 	}
 
 	/* default */
-	if (of_property_read_string(dev->dev.of_node, "vsense-name",
-				&info->vsense_name) != 0) {
+	if (capebus_of_property_read_string(dev,
+				"version", version,
+				"vsense-name", &info->vsense_name) != 0) {
 		info->vsense_name = "AIN5";
 		dev_warn(&dev->dev, "Could not read vsense-name property; "
 				"using default %u\n",
 					val);
 	}
 
-	if (of_property_read_u32(dev->dev.of_node, "vsense-scale",
-				&info->vsense_scale) != 0) {
+	if (capebus_of_property_read_u32(dev,
+				"version", version,
+				"vsense-scale", &info->vsense_scale) != 0) {
 		info->vsense_scale = 37325;	/* 373.25 */
 		dev_warn(&dev->dev, "Could not read vsense-scale property; "
 				"using default %u\n",
-- 
1.7.7.6

