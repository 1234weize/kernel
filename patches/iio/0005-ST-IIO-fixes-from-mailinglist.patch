From 34fde51a9b2a0d6f0c534e2f88cc0384d828b008 Mon Sep 17 00:00:00 2001
From: Koen Kooi <koen@dominion.thruhere.net>
Date: Thu, 24 Jan 2013 19:20:51 +0100
Subject: [PATCH 5/5] ST IIO fixes from mailinglist

---
 drivers/iio/accel/Kconfig                       |  1 -
 drivers/iio/accel/st_accel.h                    | 52 +++++++++++++++++++++++++
 drivers/iio/accel/st_accel_buffer.c             |  6 +--
 drivers/iio/accel/st_accel_core.c               |  6 +--
 drivers/iio/accel/st_accel_i2c.c                |  2 +-
 drivers/iio/accel/st_accel_spi.c                |  2 +-
 drivers/iio/common/st_sensors/st_sensors_core.c |  6 +--
 drivers/iio/gyro/st_gyro.h                      | 50 ++++++++++++++++++++++++
 drivers/iio/gyro/st_gyro_buffer.c               |  5 +--
 drivers/iio/gyro/st_gyro_core.c                 |  6 +--
 drivers/iio/gyro/st_gyro_i2c.c                  |  2 +-
 drivers/iio/gyro/st_gyro_spi.c                  |  2 +-
 drivers/iio/magnetometer/Kconfig                |  1 -
 drivers/iio/magnetometer/st_magn.h              | 47 ++++++++++++++++++++++
 drivers/iio/magnetometer/st_magn_buffer.c       |  5 +--
 drivers/iio/magnetometer/st_magn_core.c         |  4 +-
 drivers/iio/magnetometer/st_magn_i2c.c          |  2 +-
 drivers/iio/magnetometer/st_magn_spi.c          |  2 +-
 include/linux/iio/accel/st_accel.h              | 52 -------------------------
 include/linux/iio/common/st_sensors.h           |  6 ---
 include/linux/iio/gyro/st_gyro.h                | 50 ------------------------
 include/linux/iio/magnetometer/st_magn.h        | 47 ----------------------
 22 files changed, 163 insertions(+), 193 deletions(-)
 create mode 100644 drivers/iio/accel/st_accel.h
 create mode 100644 drivers/iio/gyro/st_gyro.h
 create mode 100644 drivers/iio/magnetometer/st_magn.h
 delete mode 100644 include/linux/iio/accel/st_accel.h
 delete mode 100644 include/linux/iio/gyro/st_gyro.h
 delete mode 100644 include/linux/iio/magnetometer/st_magn.h

diff --git a/drivers/iio/accel/Kconfig b/drivers/iio/accel/Kconfig
index 892e86c..6e3cc4c 100644
--- a/drivers/iio/accel/Kconfig
+++ b/drivers/iio/accel/Kconfig
@@ -32,7 +32,6 @@ config IIO_ST_ACCEL_3AXIS
 	  - st_accel (core functions for the driver [it is mandatory]);
 	  - st_accel_i2c (necessary for the I2C devices [optional*]);
 	  - st_accel_spi (necessary for the SPI devices [optional*]);
-	  - st_accel_buffer (necessary for triggered buffer [optional]);
 	  
 	  (*) one of these is necessary to do something.
 
diff --git a/drivers/iio/accel/st_accel.h b/drivers/iio/accel/st_accel.h
new file mode 100644
index 0000000..11aab66
--- /dev/null
+++ b/drivers/iio/accel/st_accel.h
@@ -0,0 +1,52 @@
+/*
+ * STMicroelectronics accelerometers driver
+ *
+ * Copyright 2012-2013 STMicroelectronics Inc.
+ *
+ * Denis Ciocca <denis.ciocca@xxxxxx>
+ * v. 1.0.0
+ * Licensed under the GPL-2.
+ */
+
+#ifndef ST_ACCEL_H
+#define ST_ACCEL_H
+
+#include <linux/types.h>
+#include <linux/iio/common/st_sensors.h>
+
+#define LSM303DLH_ACCEL_DEV_NAME	"lsm303dlh_accel"
+#define LSM303DLHC_ACCEL_DEV_NAME	"lsm303dlhc_accel"
+#define LIS3DH_ACCEL_DEV_NAME		"lis3dh"
+#define LSM330D_ACCEL_DEV_NAME		"lsm330d_accel"
+#define LSM330DL_ACCEL_DEV_NAME		"lsm330dl_accel"
+#define LSM330DLC_ACCEL_DEV_NAME	"lsm330dlc_accel"
+#define LIS331DLH_ACCEL_DEV_NAME	"lis331dlh"
+#define LSM303DL_ACCEL_DEV_NAME		"lsm303dl_accel"
+#define LSM303DLM_ACCEL_DEV_NAME	"lsm303dlm_accel"
+#define LSM330_ACCEL_DEV_NAME		"lsm330_accel"
+
+int st_accel_common_probe(struct iio_dev *indio_dev);
+void st_accel_common_remove(struct iio_dev *indio_dev);
+int st_accel_set_dataready_irq(struct iio_dev *indio_dev, bool state);
+int st_accel_set_axis_enable(struct iio_dev *indio_dev, u8 active_bit);
+int st_accel_set_enable(struct iio_dev *indio_dev, bool enable);
+
+#ifdef CONFIG_IIO_BUFFER
+int st_accel_allocate_ring(struct iio_dev *indio_dev);
+void st_accel_deallocate_ring(struct iio_dev *indio_dev);
+int st_accel_trig_set_state(struct iio_trigger *trig, bool state);
+#else /* CONFIG_IIO_BUFFER */
+static inline int st_accel_allocate_ring(struct iio_dev *indio_dev)
+{
+	return 0;
+}
+static inline void st_accel_deallocate_ring(struct iio_dev *indio_dev)
+{
+}
+static inline int st_accel_trig_set_state(struct iio_trigger *trig, bool state)
+{
+	return 0;
+}
+#endif /* CONFIG_IIO_BUFFER */
+
+#endif /* ST_ACCEL_H */
diff --git a/drivers/iio/accel/st_accel_buffer.c b/drivers/iio/accel/st_accel_buffer.c
index 5fa1322..b39c6b1 100644
--- a/drivers/iio/accel/st_accel_buffer.c
+++ b/drivers/iio/accel/st_accel_buffer.c
@@ -21,16 +21,14 @@
 #include <linux/iio/trigger_consumer.h>
 #include <linux/iio/triggered_buffer.h>
 
-#include <linux/iio/accel/st_accel.h>
 #include <linux/iio/common/st_sensors.h>
-
+#include "st_accel.h"
 
 int st_accel_trig_set_state(struct iio_trigger *trig, bool state)
 {
 	struct iio_dev *indio_dev = trig->private_data;
 	return st_accel_set_dataready_irq(indio_dev, state);
 }
-EXPORT_SYMBOL(st_accel_trig_set_state);
 
 static int st_accel_buffer_preenable(struct iio_dev *indio_dev)
 {
@@ -106,13 +104,11 @@ int st_accel_allocate_ring(struct iio_dev *indio_dev)
 	return iio_triggered_buffer_setup(indio_dev, &iio_pollfunc_store_time,
 		&st_sensors_trigger_handler, &st_accel_buffer_setup_ops);
 }
-EXPORT_SYMBOL(st_accel_allocate_ring);
 
 void st_accel_deallocate_ring(struct iio_dev *indio_dev)
 {
 	iio_triggered_buffer_cleanup(indio_dev);
 }
-EXPORT_SYMBOL(st_accel_deallocate_ring);
 
 MODULE_AUTHOR("Denis Ciocca <denis.ciocca@xxxxxx>");
 MODULE_DESCRIPTION("STMicroelectronics accelerometers buffer");
diff --git a/drivers/iio/accel/st_accel_core.c b/drivers/iio/accel/st_accel_core.c
index dd03099..a4802ce 100644
--- a/drivers/iio/accel/st_accel_core.c
+++ b/drivers/iio/accel/st_accel_core.c
@@ -23,9 +23,8 @@
 #include <linux/iio/trigger_consumer.h>
 #include <linux/iio/buffer.h>
 
-#include <linux/iio/accel/st_accel.h>
 #include <linux/iio/common/st_sensors.h>
-
+#include "st_accel.h"
 
 /* DEFAULT VALUE FOR SENSORS */
 #define ST_ACCEL_DEFAULT_OUT_X_L_ADDR		0x28
@@ -408,7 +407,6 @@ int st_accel_set_dataready_irq(struct iio_dev *indio_dev, bool state)
 	return st_sensors_set_dataready_irq(indio_dev,
 					&st_accel_sensors[adata->index], state);
 }
-EXPORT_SYMBOL(st_accel_set_dataready_irq);
 
 int st_accel_set_axis_enable(struct iio_dev *indio_dev, u8 active_bit)
 {
@@ -417,7 +415,6 @@ int st_accel_set_axis_enable(struct iio_dev *indio_dev, u8 active_bit)
 	return st_sensors_set_axis_enable(indio_dev,
 				&st_accel_sensors[adata->index], active_bit);
 }
-EXPORT_SYMBOL(st_accel_set_axis_enable);
 
 int st_accel_set_enable(struct iio_dev *indio_dev, bool enable)
 {
@@ -426,7 +423,6 @@ int st_accel_set_enable(struct iio_dev *indio_dev, bool enable)
 	return st_sensors_set_enable(indio_dev,
 				&st_accel_sensors[adata->index], enable);
 }
-EXPORT_SYMBOL(st_accel_set_enable);
 
 static ssize_t st_accel_sysfs_set_sampling_frequency(struct device *dev,
 		struct device_attribute *attr, const char *buf, size_t size)
diff --git a/drivers/iio/accel/st_accel_i2c.c b/drivers/iio/accel/st_accel_i2c.c
index 026a948..1e180ea 100644
--- a/drivers/iio/accel/st_accel_i2c.c
+++ b/drivers/iio/accel/st_accel_i2c.c
@@ -15,9 +15,9 @@
 #include <linux/iio/iio.h>
 #include <linux/iio/trigger.h>
 
-#include <linux/iio/accel/st_accel.h>
 #include <linux/iio/common/st_sensors.h>
 #include <linux/iio/common/st_sensors_i2c.h>
+#include "st_accel.h"
 
 static int st_accel_i2c_probe(struct i2c_client *client,
 						const struct i2c_device_id *id)
diff --git a/drivers/iio/accel/st_accel_spi.c b/drivers/iio/accel/st_accel_spi.c
index d74f395..55ec3d1 100644
--- a/drivers/iio/accel/st_accel_spi.c
+++ b/drivers/iio/accel/st_accel_spi.c
@@ -15,9 +15,9 @@
 #include <linux/iio/iio.h>
 #include <linux/iio/trigger.h>
 
-#include <linux/iio/accel/st_accel.h>
 #include <linux/iio/common/st_sensors.h>
 #include <linux/iio/common/st_sensors_spi.h>
+#include "st_accel.h"
 
 static int st_accel_spi_probe(struct spi_device *spi)
 {
diff --git a/drivers/iio/common/st_sensors/st_sensors_core.c b/drivers/iio/common/st_sensors/st_sensors_core.c
index f09d60e..2707e32 100644
--- a/drivers/iio/common/st_sensors/st_sensors_core.c
+++ b/drivers/iio/common/st_sensors/st_sensors_core.c
@@ -20,7 +20,7 @@
 
 #define ST_SENSORS_WAI_ADDRESS		0x0f
 
-int st_sensors_write_data_with_mask(struct iio_dev *indio_dev,
+static int st_sensors_write_data_with_mask(struct iio_dev *indio_dev,
 						u8 reg_addr, u8 mask, u8 data)
 {
 	int err;
@@ -37,7 +37,6 @@ int st_sensors_write_data_with_mask(struct iio_dev *indio_dev,
 st_sensors_write_data_with_mask_error:
 	return err;
 }
-EXPORT_SYMBOL(st_sensors_write_data_with_mask);
 
 int st_sensors_get_sampling_frequency_avl(struct iio_dev *indio_dev,
 			const struct st_sensor_odr_avl *odr_avl, char *buf)
@@ -152,7 +151,7 @@ st_sensors_match_odr_error:
 	return ret;
 }
 
-int st_sensors_set_fullscale(struct iio_dev *indio_dev,
+static int st_sensors_set_fullscale(struct iio_dev *indio_dev,
 			const struct st_sensors *sensor, unsigned int fs)
 {
 	int err, i;
@@ -175,7 +174,6 @@ st_accel_set_fullscale_error:
 	dev_err(&indio_dev->dev, "failed to set new fullscale.\n");
 	return err;
 }
-EXPORT_SYMBOL(st_sensors_set_fullscale);
 
 int st_sensors_set_enable(struct iio_dev *indio_dev,
 				const struct st_sensors *sensor, bool enable)
diff --git a/drivers/iio/gyro/st_gyro.h b/drivers/iio/gyro/st_gyro.h
new file mode 100644
index 0000000..ee9b49d
--- /dev/null
+++ b/drivers/iio/gyro/st_gyro.h
@@ -0,0 +1,50 @@
+/*
+ * STMicroelectronics gyroscopes driver
+ *
+ * Copyright 2012-2013 STMicroelectronics Inc.
+ *
+ * Denis Ciocca <denis.ciocca@xxxxxx>
+ * v. 1.0.0
+ * Licensed under the GPL-2.
+ */
+
+#ifndef ST_GYRO_H
+#define ST_GYRO_H
+
+#include <linux/types.h>
+#include <linux/iio/common/st_sensors.h>
+
+#define L3G4200D_GYRO_DEV_NAME		"l3g4200d"
+#define LSM330D_GYRO_DEV_NAME		"lsm330d_gyro"
+#define LSM330DL_GYRO_DEV_NAME		"lsm330dl_gyro"
+#define LSM330DLC_GYRO_DEV_NAME		"lsm330dlc_gyro"
+#define L3GD20_GYRO_DEV_NAME		"l3gd20"
+#define L3GD20H_GYRO_DEV_NAME		"l3gd20h"
+#define L3G4IS_GYRO_DEV_NAME		"l3g4is_ui"
+#define LSM330_GYRO_DEV_NAME		"lsm330_gyro"
+
+int st_gyro_common_probe(struct iio_dev *indio_dev);
+void st_gyro_common_remove(struct iio_dev *indio_dev);
+int st_gyro_set_dataready_irq(struct iio_dev *indio_dev, bool state);
+int st_gyro_set_axis_enable(struct iio_dev *indio_dev, u8 active_bit);
+int st_gyro_set_enable(struct iio_dev *indio_dev, bool enable);
+
+#ifdef CONFIG_IIO_BUFFER
+int st_gyro_allocate_ring(struct iio_dev *indio_dev);
+void st_gyro_deallocate_ring(struct iio_dev *indio_dev);
+int st_gyro_trig_set_state(struct iio_trigger *trig, bool state);
+#else /* CONFIG_IIO_BUFFER */
+static inline int st_gyro_allocate_ring(struct iio_dev *indio_dev)
+{
+	return 0;
+}
+static inline void st_gyro_deallocate_ring(struct iio_dev *indio_dev)
+{
+}
+static inline int st_gyro_trig_set_state(struct iio_trigger *trig, bool state)
+{
+	return 0;
+}
+#endif /* CONFIG_IIO_BUFFER */
+
+#endif /* ST_GYRO_H */
diff --git a/drivers/iio/gyro/st_gyro_buffer.c b/drivers/iio/gyro/st_gyro_buffer.c
index 1916d0b..6bfbb89 100644
--- a/drivers/iio/gyro/st_gyro_buffer.c
+++ b/drivers/iio/gyro/st_gyro_buffer.c
@@ -21,8 +21,8 @@
 #include <linux/iio/trigger_consumer.h>
 #include <linux/iio/triggered_buffer.h>
 
-#include <linux/iio/gyro/st_gyro.h>
 #include <linux/iio/common/st_sensors.h>
+#include "st_gyro.h"
 
 
 int st_gyro_trig_set_state(struct iio_trigger *trig, bool state)
@@ -30,7 +30,6 @@ int st_gyro_trig_set_state(struct iio_trigger *trig, bool state)
 	struct iio_dev *indio_dev = trig->private_data;
 	return st_gyro_set_dataready_irq(indio_dev, state);
 }
-EXPORT_SYMBOL(st_gyro_trig_set_state);
 
 static int st_gyro_buffer_preenable(struct iio_dev *indio_dev)
 {
@@ -106,13 +105,11 @@ int st_gyro_allocate_ring(struct iio_dev *indio_dev)
 	return iio_triggered_buffer_setup(indio_dev, &iio_pollfunc_store_time,
 		&st_sensors_trigger_handler, &st_gyro_buffer_setup_ops);
 }
-EXPORT_SYMBOL(st_gyro_allocate_ring);
 
 void st_gyro_deallocate_ring(struct iio_dev *indio_dev)
 {
 	iio_triggered_buffer_cleanup(indio_dev);
 }
-EXPORT_SYMBOL(st_gyro_deallocate_ring);
 
 MODULE_AUTHOR("Denis Ciocca <denis.ciocca@xxxxxx>");
 MODULE_DESCRIPTION("STMicroelectronics gyroscopes buffer");
diff --git a/drivers/iio/gyro/st_gyro_core.c b/drivers/iio/gyro/st_gyro_core.c
index 59123ff..2f9d15d 100644
--- a/drivers/iio/gyro/st_gyro_core.c
+++ b/drivers/iio/gyro/st_gyro_core.c
@@ -24,9 +24,8 @@
 #include <linux/iio/trigger_consumer.h>
 #include <linux/iio/buffer.h>
 
-#include <linux/iio/gyro/st_gyro.h>
 #include <linux/iio/common/st_sensors.h>
-
+#include "st_gyro.h"
 
 /* DEFAULT VALUE FOR SENSORS */
 #define ST_GYRO_DEFAULT_OUT_X_L_ADDR		0x28
@@ -276,7 +275,6 @@ int st_gyro_set_dataready_irq(struct iio_dev *indio_dev, bool state)
 	return st_sensors_set_dataready_irq(indio_dev,
 					&st_gyro_sensors[gdata->index], state);
 }
-EXPORT_SYMBOL(st_gyro_set_dataready_irq);
 
 int st_gyro_set_axis_enable(struct iio_dev *indio_dev, u8 active_bit)
 {
@@ -285,7 +283,6 @@ int st_gyro_set_axis_enable(struct iio_dev *indio_dev, u8 active_bit)
 	return st_sensors_set_axis_enable(indio_dev,
 				&st_gyro_sensors[gdata->index], active_bit);
 }
-EXPORT_SYMBOL(st_gyro_set_axis_enable);
 
 int st_gyro_set_enable(struct iio_dev *indio_dev, bool enable)
 {
@@ -294,7 +291,6 @@ int st_gyro_set_enable(struct iio_dev *indio_dev, bool enable)
 	return st_sensors_set_enable(indio_dev,
 				&st_gyro_sensors[gdata->index], enable);
 }
-EXPORT_SYMBOL(st_gyro_set_enable);
 
 static ssize_t st_gyro_sysfs_set_sampling_frequency(struct device *dev,
 		struct device_attribute *attr, const char *buf, size_t size)
diff --git a/drivers/iio/gyro/st_gyro_i2c.c b/drivers/iio/gyro/st_gyro_i2c.c
index 060b1b8..e9aff91 100644
--- a/drivers/iio/gyro/st_gyro_i2c.c
+++ b/drivers/iio/gyro/st_gyro_i2c.c
@@ -15,9 +15,9 @@
 #include <linux/iio/iio.h>
 #include <linux/iio/trigger.h>
 
-#include <linux/iio/gyro/st_gyro.h>
 #include <linux/iio/common/st_sensors.h>
 #include <linux/iio/common/st_sensors_i2c.h>
+#include "st_gyro.h"
 
 static int st_gyro_i2c_probe(struct i2c_client *client,
 						const struct i2c_device_id *id)
diff --git a/drivers/iio/gyro/st_gyro_spi.c b/drivers/iio/gyro/st_gyro_spi.c
index 380203b..2086748 100644
--- a/drivers/iio/gyro/st_gyro_spi.c
+++ b/drivers/iio/gyro/st_gyro_spi.c
@@ -15,9 +15,9 @@
 #include <linux/iio/iio.h>
 #include <linux/iio/trigger.h>
 
-#include <linux/iio/gyro/st_gyro.h>
 #include <linux/iio/common/st_sensors.h>
 #include <linux/iio/common/st_sensors_spi.h>
+#include "st_gyro.h"
 
 static int st_gyro_spi_probe(struct spi_device *spi)
 {
diff --git a/drivers/iio/magnetometer/Kconfig b/drivers/iio/magnetometer/Kconfig
index 8c20e82..0ea5075 100644
--- a/drivers/iio/magnetometer/Kconfig
+++ b/drivers/iio/magnetometer/Kconfig
@@ -31,7 +31,6 @@ config IIO_ST_MAGN_3AXIS
 	  - st_magn (core functions for the driver [it is mandatory]);
 	  - st_magn_i2c (necessary for the I2C devices [optional*]);
 	  - st_magn_spi (necessary for the SPI devices [optional*]);
-	  - st_magn_buffer (necessary for triggered buffer [optional]);
 	  
 	  (*) one of these is necessary to do something.
 
diff --git a/drivers/iio/magnetometer/st_magn.h b/drivers/iio/magnetometer/st_magn.h
new file mode 100644
index 0000000..d89eb29
--- /dev/null
+++ b/drivers/iio/magnetometer/st_magn.h
@@ -0,0 +1,47 @@
+/*
+ * STMicroelectronics magnetometers driver
+ *
+ * Copyright 2012-2013 STMicroelectronics Inc.
+ *
+ * Denis Ciocca <denis.ciocca@xxxxxx>
+ * v. 1.0.0
+ * Licensed under the GPL-2.
+ */
+
+#ifndef ST_MAGN_H
+#define ST_MAGN_H
+
+#include <linux/types.h>
+#include <linux/iio/common/st_sensors.h>
+
+#define LSM303DLHC_MAGN_DEV_NAME	"lsm303dlhc_magn"
+#define LSM303DLM_MAGN_DEV_NAME		"lsm303dlm_magn"
+#define LIS3MDL_MAGN_DEV_NAME		"lis3mdl"
+
+int st_magn_common_probe(struct iio_dev *indio_dev);
+void st_magn_common_remove(struct iio_dev *indio_dev);
+int st_magn_set_axis_enable(struct iio_dev *indio_dev, u8 active_bit);
+int st_magn_set_enable(struct iio_dev *indio_dev, bool enable);
+
+#ifdef CONFIG_IIO_BUFFER
+int st_magn_allocate_ring(struct iio_dev *indio_dev);
+void st_magn_deallocate_ring(struct iio_dev *indio_dev);
+#else /* CONFIG_IIO_BUFFER */
+static inline int st_magn_probe_trigger(struct iio_dev *indio_dev, int irq)
+{
+	return 0;
+}
+static inline void st_magn_remove_trigger(struct iio_dev *indio_dev, int irq)
+{
+	return;
+}
+static inline int st_magn_allocate_ring(struct iio_dev *indio_dev)
+{
+	return 0;
+}
+static inline void st_magn_deallocate_ring(struct iio_dev *indio_dev)
+{
+}
+#endif /* CONFIG_IIO_BUFFER */
+
+#endif /* ST_MAGN_H */
diff --git a/drivers/iio/magnetometer/st_magn_buffer.c b/drivers/iio/magnetometer/st_magn_buffer.c
index c35b291..f40cfc7 100644
--- a/drivers/iio/magnetometer/st_magn_buffer.c
+++ b/drivers/iio/magnetometer/st_magn_buffer.c
@@ -21,9 +21,8 @@
 #include <linux/iio/trigger_consumer.h>
 #include <linux/iio/triggered_buffer.h>
 
-#include <linux/iio/magnetometer/st_magn.h>
 #include <linux/iio/common/st_sensors.h>
-
+#include "st_magn.h"
 
 static int st_magn_buffer_preenable(struct iio_dev *indio_dev)
 {
@@ -89,13 +88,11 @@ int st_magn_allocate_ring(struct iio_dev *indio_dev)
 	return iio_triggered_buffer_setup(indio_dev, &iio_pollfunc_store_time,
 		&st_sensors_trigger_handler, &st_magn_buffer_setup_ops);
 }
-EXPORT_SYMBOL(st_magn_allocate_ring);
 
 void st_magn_deallocate_ring(struct iio_dev *indio_dev)
 {
 	iio_triggered_buffer_cleanup(indio_dev);
 }
-EXPORT_SYMBOL(st_magn_deallocate_ring);
 
 MODULE_AUTHOR("Denis Ciocca <denis.ciocca@xxxxxx>");
 MODULE_DESCRIPTION("STMicroelectronics magnetometers buffer");
diff --git a/drivers/iio/magnetometer/st_magn_core.c b/drivers/iio/magnetometer/st_magn_core.c
index 94608d5..df29f22 100644
--- a/drivers/iio/magnetometer/st_magn_core.c
+++ b/drivers/iio/magnetometer/st_magn_core.c
@@ -24,8 +24,8 @@
 #include <linux/iio/trigger_consumer.h>
 #include <linux/iio/buffer.h>
 
-#include <linux/iio/magnetometer/st_magn.h>
 #include <linux/iio/common/st_sensors.h>
+#include "st_magn.h"
 
 
 /* DEFAULT VALUE FOR SENSORS */
@@ -310,7 +310,6 @@ int st_magn_set_axis_enable(struct iio_dev *indio_dev, u8 active_bit)
 {
 	return 0;
 }
-EXPORT_SYMBOL(st_magn_set_axis_enable);
 
 int st_magn_set_enable(struct iio_dev *indio_dev, bool enable)
 {
@@ -319,7 +318,6 @@ int st_magn_set_enable(struct iio_dev *indio_dev, bool enable)
 	return st_sensors_set_enable(indio_dev,
 				&st_magn_sensors[mdata->index], enable);
 }
-EXPORT_SYMBOL(st_magn_set_enable);
 
 static ssize_t st_magn_sysfs_set_sampling_frequency(struct device *dev,
 		struct device_attribute *attr, const char *buf, size_t size)
diff --git a/drivers/iio/magnetometer/st_magn_i2c.c b/drivers/iio/magnetometer/st_magn_i2c.c
index b5a6330..b030584 100644
--- a/drivers/iio/magnetometer/st_magn_i2c.c
+++ b/drivers/iio/magnetometer/st_magn_i2c.c
@@ -15,9 +15,9 @@
 #include <linux/iio/iio.h>
 #include <linux/iio/trigger.h>
 
-#include <linux/iio/magnetometer/st_magn.h>
 #include <linux/iio/common/st_sensors.h>
 #include <linux/iio/common/st_sensors_i2c.h>
+#include "st_magn.h"
 
 static int st_magn_i2c_probe(struct i2c_client *client,
 						const struct i2c_device_id *id)
diff --git a/drivers/iio/magnetometer/st_magn_spi.c b/drivers/iio/magnetometer/st_magn_spi.c
index 2c2215d..d238443 100644
--- a/drivers/iio/magnetometer/st_magn_spi.c
+++ b/drivers/iio/magnetometer/st_magn_spi.c
@@ -15,9 +15,9 @@
 #include <linux/iio/iio.h>
 #include <linux/iio/trigger.h>
 
-#include <linux/iio/magnetometer/st_magn.h>
 #include <linux/iio/common/st_sensors.h>
 #include <linux/iio/common/st_sensors_spi.h>
+#include "st_magn.h"
 
 static int st_magn_spi_probe(struct spi_device *spi)
 {
diff --git a/include/linux/iio/accel/st_accel.h b/include/linux/iio/accel/st_accel.h
deleted file mode 100644
index 63bf114..0000000
--- a/include/linux/iio/accel/st_accel.h
+++ /dev/null
@@ -1,52 +0,0 @@
-/*
- * STMicroelectronics accelerometers driver
- *
- * Copyright 2012-2013 STMicroelectronics Inc.
- *
- * Denis Ciocca <denis.ciocca@xxxxxx>
- * v. 1.0.0
- * Licensed under the GPL-2.
- */
-
-#ifndef ST_ACCEL_H
-#define ST_ACCEL_H
-
-#include <linux/types.h>
-#include "../common/st_sensors.h"
-
-#define LSM303DLH_ACCEL_DEV_NAME	"lsm303dlh_accel"
-#define LSM303DLHC_ACCEL_DEV_NAME	"lsm303dlhc_accel"
-#define LIS3DH_ACCEL_DEV_NAME		"lis3dh"
-#define LSM330D_ACCEL_DEV_NAME		"lsm330d_accel"
-#define LSM330DL_ACCEL_DEV_NAME		"lsm330dl_accel"
-#define LSM330DLC_ACCEL_DEV_NAME	"lsm330dlc_accel"
-#define LIS331DLH_ACCEL_DEV_NAME	"lis331dlh"
-#define LSM303DL_ACCEL_DEV_NAME		"lsm303dl_accel"
-#define LSM303DLM_ACCEL_DEV_NAME	"lsm303dlm_accel"
-#define LSM330_ACCEL_DEV_NAME		"lsm330_accel"
-
-int st_accel_common_probe(struct iio_dev *indio_dev);
-void st_accel_common_remove(struct iio_dev *indio_dev);
-int st_accel_set_dataready_irq(struct iio_dev *indio_dev, bool state);
-int st_accel_set_axis_enable(struct iio_dev *indio_dev, u8 active_bit);
-int st_accel_set_enable(struct iio_dev *indio_dev, bool enable);
-
-#ifdef CONFIG_IIO_BUFFER
-int st_accel_allocate_ring(struct iio_dev *indio_dev);
-void st_accel_deallocate_ring(struct iio_dev *indio_dev);
-int st_accel_trig_set_state(struct iio_trigger *trig, bool state);
-#else /* CONFIG_IIO_BUFFER */
-static inline int st_accel_allocate_ring(struct iio_dev *indio_dev)
-{
-	return 0;
-}
-static inline void st_accel_deallocate_ring(struct iio_dev *indio_dev)
-{
-}
-static inline int st_accel_trig_set_state(struct iio_trigger *trig, bool state)
-{
-	return 0;
-}
-#endif /* CONFIG_IIO_BUFFER */
-
-#endif /* ST_ACCEL_H */
diff --git a/include/linux/iio/common/st_sensors.h b/include/linux/iio/common/st_sensors.h
index 9224e5c..cdb992e 100644
--- a/include/linux/iio/common/st_sensors.h
+++ b/include/linux/iio/common/st_sensors.h
@@ -235,18 +235,12 @@ int st_sensors_set_enable(struct iio_dev *indio_dev,
 int st_sensors_set_axis_enable(struct iio_dev *indio_dev,
 			const struct st_sensors *sensor, u8 axis_enable);
 
-int st_sensors_write_data_with_mask(struct iio_dev *indio_dev,
-						u8 reg_addr, u8 mask, u8 data);
-
 int st_sensors_get_sampling_frequency_avl(struct iio_dev *indio_dev,
 			const struct st_sensor_odr_avl *odr_avl, char *buf);
 
 int st_sensors_get_scale_avl(struct iio_dev *indio_dev,
 		const struct st_sensor_fullscale_avl *fullscale_avl, char *buf);
 
-int st_sensors_set_fullscale(struct iio_dev *indio_dev,
-			const struct st_sensors *sensor, unsigned int fs);
-
 int st_sensors_set_odr(struct iio_dev *indio_dev,
 			const struct st_sensors *sensor, unsigned int odr);
 
diff --git a/include/linux/iio/gyro/st_gyro.h b/include/linux/iio/gyro/st_gyro.h
deleted file mode 100644
index 9ff47f5..0000000
--- a/include/linux/iio/gyro/st_gyro.h
+++ /dev/null
@@ -1,50 +0,0 @@
-/*
- * STMicroelectronics gyroscopes driver
- *
- * Copyright 2012-2013 STMicroelectronics Inc.
- *
- * Denis Ciocca <denis.ciocca@xxxxxx>
- * v. 1.0.0
- * Licensed under the GPL-2.
- */
-
-#ifndef ST_GYRO_H
-#define ST_GYRO_H
-
-#include <linux/types.h>
-#include "../common/st_sensors.h"
-
-#define L3G4200D_GYRO_DEV_NAME		"l3g4200d"
-#define LSM330D_GYRO_DEV_NAME		"lsm330d_gyro"
-#define LSM330DL_GYRO_DEV_NAME		"lsm330dl_gyro"
-#define LSM330DLC_GYRO_DEV_NAME		"lsm330dlc_gyro"
-#define L3GD20_GYRO_DEV_NAME		"l3gd20"
-#define L3GD20H_GYRO_DEV_NAME		"l3gd20h"
-#define L3G4IS_GYRO_DEV_NAME		"l3g4is_ui"
-#define LSM330_GYRO_DEV_NAME		"lsm330_gyro"
-
-int st_gyro_common_probe(struct iio_dev *indio_dev);
-void st_gyro_common_remove(struct iio_dev *indio_dev);
-int st_gyro_set_dataready_irq(struct iio_dev *indio_dev, bool state);
-int st_gyro_set_axis_enable(struct iio_dev *indio_dev, u8 active_bit);
-int st_gyro_set_enable(struct iio_dev *indio_dev, bool enable);
-
-#ifdef CONFIG_IIO_BUFFER
-int st_gyro_allocate_ring(struct iio_dev *indio_dev);
-void st_gyro_deallocate_ring(struct iio_dev *indio_dev);
-int st_gyro_trig_set_state(struct iio_trigger *trig, bool state);
-#else /* CONFIG_IIO_BUFFER */
-static inline int st_gyro_allocate_ring(struct iio_dev *indio_dev)
-{
-	return 0;
-}
-static inline void st_gyro_deallocate_ring(struct iio_dev *indio_dev)
-{
-}
-static inline int st_gyro_trig_set_state(struct iio_trigger *trig, bool state)
-{
-	return 0;
-}
-#endif /* CONFIG_IIO_BUFFER */
-
-#endif /* ST_GYRO_H */
diff --git a/include/linux/iio/magnetometer/st_magn.h b/include/linux/iio/magnetometer/st_magn.h
deleted file mode 100644
index 3955531..0000000
--- a/include/linux/iio/magnetometer/st_magn.h
+++ /dev/null
@@ -1,47 +0,0 @@
-/*
- * STMicroelectronics magnetometers driver
- *
- * Copyright 2012-2013 STMicroelectronics Inc.
- *
- * Denis Ciocca <denis.ciocca@xxxxxx>
- * v. 1.0.0
- * Licensed under the GPL-2.
- */
-
-#ifndef ST_MAGN_H
-#define ST_MAGN_H
-
-#include <linux/types.h>
-#include "../common/st_sensors.h"
-
-#define LSM303DLHC_MAGN_DEV_NAME	"lsm303dlhc_magn"
-#define LSM303DLM_MAGN_DEV_NAME		"lsm303dlm_magn"
-#define LIS3MDL_MAGN_DEV_NAME		"lis3mdl"
-
-int st_magn_common_probe(struct iio_dev *indio_dev);
-void st_magn_common_remove(struct iio_dev *indio_dev);
-int st_magn_set_axis_enable(struct iio_dev *indio_dev, u8 active_bit);
-int st_magn_set_enable(struct iio_dev *indio_dev, bool enable);
-
-#ifdef CONFIG_IIO_BUFFER
-int st_magn_allocate_ring(struct iio_dev *indio_dev);
-void st_magn_deallocate_ring(struct iio_dev *indio_dev);
-#else /* CONFIG_IIO_BUFFER */
-static inline int st_magn_probe_trigger(struct iio_dev *indio_dev, int irq)
-{
-	return 0;
-}
-static inline void st_magn_remove_trigger(struct iio_dev *indio_dev, int irq)
-{
-	return;
-}
-static inline int st_magn_allocate_ring(struct iio_dev *indio_dev)
-{
-	return 0;
-}
-static inline void st_magn_deallocate_ring(struct iio_dev *indio_dev)
-{
-}
-#endif /* CONFIG_IIO_BUFFER */
-
-#endif /* ST_MAGN_H */
-- 
1.8.1

